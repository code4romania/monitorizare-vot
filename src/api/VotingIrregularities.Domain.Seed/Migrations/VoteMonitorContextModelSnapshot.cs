// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VoteMonitor.Entities;

namespace VotingIrregularities.Domain.Seed.Migrations
{
    [DbContext(typeof(VoteMonitorContext))]
    partial class VoteMonitorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("VoteMonitor.Entities.Answer", b =>
                {
                    b.Property<int>("IdObserver")
                        .HasColumnType("integer");

                    b.Property<int>("IdOptionToQuestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdPollingStation")
                        .HasColumnType("integer");

                    b.Property<string>("CountyCode")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("PollingStationNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("IdObserver", "IdOptionToQuestion", "IdPollingStation")
                        .HasName("PK_Answer");

                    b.HasIndex("IdObserver")
                        .HasName("IX_Answer_IdObserver");

                    b.HasIndex("IdOptionToQuestion")
                        .HasName("IX_Answer_IdOptionToQuestion");

                    b.HasIndex("IdPollingStation")
                        .HasName("IX_Answer_IdPollingStation");

                    b.HasIndex("IdObserver", "CountyCode", "PollingStationNumber", "LastModified")
                        .HasName("IX_Answer_IdObserver_CountyCode_PollingStationNumber_LastModified");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("VoteMonitor.Entities.AnswerQueryInfo", b =>
                {
                    b.Property<int>("IdObserver")
                        .HasColumnType("integer");

                    b.Property<int>("IdPollingStation")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ObserverName")
                        .HasColumnType("text");

                    b.Property<string>("ObserverPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PollingStation")
                        .HasColumnType("text");

                    b.HasKey("IdObserver", "IdPollingStation")
                        .HasName("PK_AnswerQueryInfo");

                    b.ToTable("AnswerQueryInfos");
                });

            modelBuilder.Entity("VoteMonitor.Entities.ComposedStatistics", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Label", "Code")
                        .HasName("PK_StatisticiCompuse");

                    b.ToTable("ComposedStatistics");
                });

            modelBuilder.Entity("VoteMonitor.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Diaspora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfPollingStations")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_County");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("VoteMonitor.Entities.ExportModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerFreeText")
                        .HasColumnType("text");

                    b.Property<string>("CountyCode")
                        .HasColumnType("text");

                    b.Property<string>("FormCode")
                        .HasColumnType("text");

                    b.Property<int>("IdNgo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NoteAttachmentPath")
                        .HasColumnType("text");

                    b.Property<string>("NoteText")
                        .HasColumnType("text");

                    b.Property<string>("ObserverPhone")
                        .HasColumnType("text");

                    b.Property<string>("OptionText")
                        .HasColumnType("text");

                    b.Property<int>("PollingStationNumber")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExportModels");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasMaxLength(2)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("CurrentVersion")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Diaspora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Draft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_FormVersion");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("VoteMonitor.Entities.FormSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("IdForm")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_FormSection");

                    b.HasIndex("IdForm");

                    b.ToTable("FormSections");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Ngo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Organizer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("PK_NGO");

                    b.ToTable("Ngos");
                });

            modelBuilder.Entity("VoteMonitor.Entities.NgoAdmin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("IdNgo")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_NgoAdminId");

                    b.HasIndex("IdNgo");

                    b.ToTable("NgoAdmin");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdObserver")
                        .HasColumnType("integer");

                    b.Property<int>("IdPollingStation")
                        .HasColumnType("integer");

                    b.Property<int?>("IdQuestion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_Note");

                    b.HasIndex("IdObserver")
                        .HasName("IX_Note_IdObserver");

                    b.HasIndex("IdPollingStation")
                        .HasName("IX_Note_IdPollingStation");

                    b.HasIndex("IdQuestion")
                        .HasName("IX_Note_IdQuestion");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("VoteMonitor.Entities.NotesAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id")
                        .HasName("PK_NoteAttachment");

                    b.HasIndex("NoteId");

                    b.ToTable("NotesAttachments");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("Channel")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SenderAdminId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SenderAdminId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("VoteMonitor.Entities.NotificationRecipient", b =>
                {
                    b.Property<int>("ObserverId")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.HasKey("ObserverId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationRecipients");
                });

            modelBuilder.Entity("VoteMonitor.Entities.NotificationRegistrationData", b =>
                {
                    b.Property<int>("ObserverId")
                        .HasColumnType("integer");

                    b.Property<string>("ChannelName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.HasKey("ObserverId", "ChannelName")
                        .HasName("PK_NotificationRegistrationData");

                    b.HasIndex("ObserverId")
                        .HasName("IX_NotificationRegistrationData_IdObserver");

                    b.HasIndex("ObserverId", "ChannelName")
                        .HasName("IX_NotificationRegistrationData_ObserverId_ChannelName");

                    b.ToTable("NotificationRegistrationData");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Observer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeviceRegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("FromTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("IdNgo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTestObserver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("MobileDeviceId")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("MobileDeviceIdType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_Observer");

                    b.HasIndex("IdNgo")
                        .HasName("IX_Observer_IdNgo");

                    b.HasIndex("MobileDeviceId");

                    b.HasIndex("MobileDeviceIdType");

                    b.ToTable("Observers");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Hint")
                        .HasColumnType("text");

                    b.Property<bool>("IsFreeText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id")
                        .HasName("PK_Option");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("VoteMonitor.Entities.OptionToQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Flagged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("IdOption")
                        .HasColumnType("integer");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_OptionToQuestion");

                    b.HasIndex("IdOption")
                        .HasName("IX_OptionToQuestion_Option");

                    b.HasIndex("IdQuestion")
                        .HasName("IX_OptionToQuestion_Question");

                    b.HasIndex("IdOption", "IdQuestion")
                        .IsUnique()
                        .HasName("IX_OptionToQuestion");

                    b.ToTable("OptionsToQuestions");
                });

            modelBuilder.Entity("VoteMonitor.Entities.OptionsStatistics", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<bool>("Flagged")
                        .HasColumnType("boolean");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Label")
                        .HasName("PK_StatisticiOptiuni");

                    b.ToTable("OptionsStatistics");
                });

            modelBuilder.Entity("VoteMonitor.Entities.PollingStation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AdministrativeTerritoryCode")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Coordinates")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("IdCounty")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("TerritoryCode")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_PollingStation");

                    b.HasIndex("IdCounty")
                        .HasName("IX_PollingStation_IdCounty");

                    b.HasIndex("IdCounty", "Id")
                        .IsUnique()
                        .HasName("IX_Unique_IdCounty_IdPollingStation");

                    b.ToTable("PollingStations");
                });

            modelBuilder.Entity("VoteMonitor.Entities.PollingStationInfo", b =>
                {
                    b.Property<int>("IdObserver")
                        .HasColumnType("integer");

                    b.Property<int>("IdPollingStation")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsPollingStationPresidentFemale")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("ObserverArrivalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ObserverLeaveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("UrbanArea")
                        .HasColumnType("boolean");

                    b.HasKey("IdObserver", "IdPollingStation")
                        .HasName("PK_PollingStationInfo");

                    b.HasIndex("IdObserver")
                        .HasName("IX_PollingStationInfo_IdObserver");

                    b.HasIndex("IdPollingStation")
                        .HasName("IX_PollingStationInfo_IdPollingStation");

                    b.ToTable("PollingStationInfos");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Hint")
                        .HasColumnType("text");

                    b.Property<int>("IdSection")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id")
                        .HasName("PK_Question");

                    b.HasIndex("IdSection")
                        .HasName("IX_Question_IdSection");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("VoteMonitor.Entities.SimpleStatistics", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Label")
                        .HasName("PK_Statistici");

                    b.ToTable("SimpleStatistics");
                });

            modelBuilder.Entity("VoteMonitor.Entities.Answer", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Observer", "Observer")
                        .WithMany("Answers")
                        .HasForeignKey("IdObserver")
                        .HasConstraintName("FK_Answer_Observer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoteMonitor.Entities.OptionToQuestion", "OptionAnswered")
                        .WithMany("Answers")
                        .HasForeignKey("IdOptionToQuestion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoteMonitor.Entities.PollingStation", "PollingStation")
                        .WithMany("Answers")
                        .HasForeignKey("IdPollingStation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.FormSection", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Form", "Form")
                        .WithMany("FormSections")
                        .HasForeignKey("IdForm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.NgoAdmin", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Ngo", "Ngo")
                        .WithMany("NgoAdmins")
                        .HasForeignKey("IdNgo")
                        .HasConstraintName("FK_NgoAdmin_Ngo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.Note", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Observer", "Observer")
                        .WithMany("Notes")
                        .HasForeignKey("IdObserver")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoteMonitor.Entities.PollingStation", "PollingStation")
                        .WithMany("Notes")
                        .HasForeignKey("IdPollingStation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoteMonitor.Entities.Question", "Question")
                        .WithMany("Notes")
                        .HasForeignKey("IdQuestion")
                        .HasConstraintName("FK_Note_Question");
                });

            modelBuilder.Entity("VoteMonitor.Entities.NotesAttachments", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Note", "Note")
                        .WithMany("Attachments")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.Notification", b =>
                {
                    b.HasOne("VoteMonitor.Entities.NgoAdmin", "SenderAdmin")
                        .WithMany("NotificationsSent")
                        .HasForeignKey("SenderAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.NotificationRecipient", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Notification", "Notification")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoteMonitor.Entities.Observer", "Observer")
                        .WithMany("Notifications")
                        .HasForeignKey("ObserverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.NotificationRegistrationData", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Observer", "Observer")
                        .WithMany()
                        .HasForeignKey("ObserverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.Observer", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Ngo", "Ngo")
                        .WithMany("Observers")
                        .HasForeignKey("IdNgo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.OptionToQuestion", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Option", "Option")
                        .WithMany("OptionsToQuestions")
                        .HasForeignKey("IdOption")
                        .HasConstraintName("FK_OptionToQuestion_Option")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoteMonitor.Entities.Question", "Question")
                        .WithMany("OptionsToQuestions")
                        .HasForeignKey("IdQuestion")
                        .HasConstraintName("FK_OptionToQuestion_Question")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.PollingStation", b =>
                {
                    b.HasOne("VoteMonitor.Entities.County", "County")
                        .WithMany("PollingStations")
                        .HasForeignKey("IdCounty")
                        .HasConstraintName("FK_PollingStation_County")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.PollingStationInfo", b =>
                {
                    b.HasOne("VoteMonitor.Entities.Observer", "Observer")
                        .WithMany("PollingStationInfos")
                        .HasForeignKey("IdObserver")
                        .HasConstraintName("FK_PollingStationInfo_Observer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VoteMonitor.Entities.PollingStation", "PollingStation")
                        .WithMany("PollingStationInfos")
                        .HasForeignKey("IdPollingStation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VoteMonitor.Entities.Question", b =>
                {
                    b.HasOne("VoteMonitor.Entities.FormSection", "FormSection")
                        .WithMany("Questions")
                        .HasForeignKey("IdSection")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
